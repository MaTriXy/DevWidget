plugins {
    id 'io.gitlab.arturbosch.detekt' version '1.0.0-RC11'
    id 'org.jlleitschuh.gradle.ktlint'
}
apply plugin: 'com.android.application'
apply from: configFile('android-common-config.gradle')
apply plugin: 'com.novoda.android-command'
apply plugin: 'com.novoda.build-properties'
apply plugin: 'com.novoda.static-analysis'
if (isPlay) {
    apply plugin: 'io.fabric'
    apply plugin: 'com.github.triplet.play'
}

buildProperties {
    signing.using(file('props/release.signing')) | file('props/debug.signing')
    secrets.using(file('props/secrets.properties'))
}

def secrets = buildProperties.secrets
def gitSha = "${-> 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()}"

android {
    defaultConfig {
        applicationId 'com.tasomaniac.devwidget'
        versionCode versions.versionCode
        versionName versions.versionName
        buildConfigString 'GIT_SHA', gitSha

        resConfigs 'en'

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    signingConfigs {
        debug.storeFile file('props/debug.keystore')
        release {
            def signing = buildProperties.signing
            storeFile file("props/${signing['storeFile'].string}")
            storePassword signing['storePassword'].string
            keyAlias signing['keyAlias'].string
            keyPassword signing['keyPassword'].string
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions 'store'
    productFlavors {
        floss {
            applicationIdSuffix '.floss'
            versionNameSuffix '-floss'
        }
        play {}
    }
}

staticAnalysis {
    penalty {
        maxWarnings = 10
        maxErrors = 0
    }

    detekt {
        config = files('props/detekt.yml')
    }

    ktlint {
        version '0.29.0'
        reporters = [ReporterType.CHECKSTYLE]

        includeVariants { it.name == 'flossDebug' }
    }

    lintOptions {
        textReport true
        textOutput 'stdout'

        checkAllWarnings true
        checkTestSources false
        checkReleaseBuilds false

        lintConfig file('props/lint.xml')

        includeVariants { it.name == 'flossDebug' }
    }
}

if (isPlay) {
    play {
        serviceAccountEmail = secrets['play_service_account'].or('').string
        pk12File = file(secrets['play_key_file'].or('no_file.p12').string)
        track = playPublishTrack
    }
}

dependencies {
    implementation project(':data')
    implementation project(':widget')

    playImplementation 'com.crashlytics.sdk.android:crashlytics:2.9.6'
    playImplementation 'com.google.firebase:firebase-core:16.0.5'

    implementation 'androidx.fragment:fragment-ktx:1.0.0'
    implementation "androidx.cardview:cardview:1.0.0"
    implementation 'androidx.preference:preference-ktx:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
    kapt "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"

    implementation 'com.jakewharton.rx2:replaying-share-kotlin:2.1.0'

    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation "androidx.room:room-testing:$versions.room"
}

if (isPlay) {
    apply plugin: 'com.google.gms.google-services'
}
